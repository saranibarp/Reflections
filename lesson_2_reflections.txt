What happens when you initialize a repository? Why do you need to do it?
a hidden git folder gets created in the chosen directory, this folder contains metadata
about the repository. I need to do it to be able to commit changes to my files and compare their
different versions. I need to add files to the repository first

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory is the folder on my machine, it's linked to a repository. Not all files in a working directory are tracked
by a repository.
The repository keeps metadata about tracked files and the different commits we could do for those files
The staging area is a middle ground between the working directory and the repository, it's usefull in case I make a mistake and add
a file I don't want in my repository, I can delete it from the staging area but it will still exist in my working directory

How can you use the staging area to make sure you have one commit per logical change?
I could use git diff and git diff --staged to see what's currently in the staging area and make sure it correspond to only one
logical change

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
when trying out experimental features but you want to keep an original version of your files ready to use, you could create two branches
and experiment on one of them knowing you have an original version safe somewhere else
when a lot of different people work on the same files each one of them could have their own branch

How do the diagrams help you visualize the branch structure?
same way I can see branches on a tree, they help understand the concept better

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is combining all the commits and changes done to the files by both branches into just one branch,
you represent it in the diagran by "joining two branches" which only MAKES SENSE! because, (oh surprise) that's exactly what 
we're doing...I really don't see the point of dumb questions

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic
Pros: saves time and effort 
Cons: some logical change could be missed in the automatic process
Manually
Pros: you can make sure all the changes that need to be committed will be comitted
Cons: takes longer